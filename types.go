package corvallisbus

import (
	"appengine/datastore"
	"time"
)

/*
  Information provided is a combination of two resources:
    * CTS connexionz database
      - https://github.com/cvanderschuere/go-connexionz
    * CTS Google Transit Feed
      - ftp://ftp.ci.corvallis.or.us/pw/Transportation/GoogleTransitFeed/Google_Transit.zip
      - Reference: https://developers.google.com/transit/gtfs/reference?csw=1

  Connexionz is a dynamic data so it will take priority

  Key information in Google Transit Google Transit Feed
    * Schedule (calendar.txt)
    * Scheduled Arrivals (stop_times.txt)
    * Route color (routes.txt)
    * Service Exceptions (calendar_dates.txt)
*/

type Route struct {
	// Key is autogenerated (int64) -- No need to call directly by key
	ID int64 `datastore:"-" json:"-" goon:"id"` // Used only for goon

	Name           string `json:",omitempty"` // Treated the same as route number for most routes
	AdditionalName string `json:",omitempty"` // More user-friendly (ie BB_N -> Beaver Bus- North)

	Description string `json:",omitempty"`
	URL         string `json:",omitempty"`

	// https://developers.google.com/maps/documentation/utilities/polylinealgorithm
	Polyline string `datastore:",noindex" json:",omitempty"` // Needed due to length
	Color    string `json:",omitempty"`                      // Route color stored as hexadecimal

	Direction string           `json:",omitempty"`
	Stops     []*datastore.Key `json:"-"`                        // organized by order travelled
	Path      []*Stop          `datastore:"-" json:",omitempty"` // Calculated at runtime

	Start time.Time `json:"-"` // Begining of validity of arrivals
	End   time.Time `json:"-"` // End of validity of arrivals
}

type Stop struct {
	// Key equal to platform number (int) -- same value posted at bus signs
	ID int64 `datastore:"-" goon:"id"` // Used only for goon

	Name string

	Road           string  // Road Name
	Bearing        float64 // Bearing to road
	AdherancePoint bool    // Stops where bus will stop until scheduled departure time

	Lat  float64
	Long float64

	// Calculated Information
	Distance float64 `datastore:"-" json:",omitempty"`
}

// Implement sorting
type StopSlice []*Stop

func (s StopSlice) Len() int      { return len(s) }
func (s StopSlice) Swap(i, j int) { s[i], s[j] = s[j], s[i] }

type ByDistance struct{ StopSlice }

func (s ByDistance) Less(i, j int) bool { return s.StopSlice[i].Distance < s.StopSlice[j].Distance }

type Arrival struct {
	// Key will be an autogenerated incomplete Key (int)
	// Parent will be Stop associated with this time
	// Run query to find
	ID int64 `datastore:"-" json:"-" goon:"id"`

	Route     *datastore.Key
	routeName string `json:"-" datastore:"-"`

	Scheduled time.Duration // Stored as offset from midnight in US/Pacific

	IsScheduled bool // true for values with known schedule times -- others are estimates

	// What days of the week this arrival is valid on
	Monday    bool `json:"-"`
	Tuesday   bool `json:"-"`
	Wednesday bool `json:"-"`
	Thursday  bool `json:"-"`
	Friday    bool `json:"-"`
	Saturday  bool `json:"-"`
	Sunday    bool `json:"-"`
}

type ETA struct {
	route    string
	expected time.Duration
}

// https://developers.google.com/transit/gtfs/reference?csw=1#calendar_dates_fields
type CalendarException struct {
	// Key will be an autogenerated incomplete Key (string) -- string is faster

	Type int8
	Date time.Time
}
